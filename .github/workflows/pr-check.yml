name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

    - name: Run golangci-lint
      run: golangci-lint run --timeout 5m ./...

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not formatted. Run: go fmt ./..."
          gofmt -s -l .
          exit 1
        fi
        echo "✅ Code is properly formatted"

    - name: Check Go modules
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "❌ go.mod or go.sum needs updates. Run: go mod tidy"
          git diff go.mod go.sum
          exit 1
        fi
        echo "✅ Go modules are up to date"

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: './...'

  test:
    name: Test Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Run tests with coverage
      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Check test coverage
      run: |
        COVERAGE=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
        echo "Test coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 50" | bc -l) )); then
          echo "❌ Test coverage is below 50%"
          exit 1
        fi
        echo "✅ Test coverage is acceptable"

  build-check:
    name: Multi-platform Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - { os: darwin, arch: amd64 }
          - { os: darwin, arch: arm64 }
          - { os: linux, arch: amd64 }
          - { os: linux, arch: arm64 }
          - { os: windows, arch: amd64 }

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build for ${{ matrix.platform.os }}/${{ matrix.platform.arch }}
      run: |
        GOOS=${{ matrix.platform.os }} GOARCH=${{ matrix.platform.arch }} \
        go build -o doku-${{ matrix.platform.os }}-${{ matrix.platform.arch }} ./cmd/doku

        echo "✅ Successfully built for ${{ matrix.platform.os }}/${{ matrix.platform.arch }}"
